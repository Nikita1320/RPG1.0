//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/StateInput/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""fca2100f-e1d2-4310-aff9-c1acbfd71040"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f2dd6614-09b0-494b-8fb9-c5269fbeeac3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ability1"",
                    ""type"": ""Button"",
                    ""id"": ""f53fb1cb-d9e0-4ffa-b6e7-e0c4e7679f12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability2"",
                    ""type"": ""Button"",
                    ""id"": ""13f97601-f412-4950-b595-2b86cca4bb0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability3"",
                    ""type"": ""Button"",
                    ""id"": ""d5af252a-ae13-4e4f-b5fc-edc6e39eceef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability4"",
                    ""type"": ""Button"",
                    ""id"": ""5859a255-231b-4fae-8020-70edbceb97c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability5"",
                    ""type"": ""Button"",
                    ""id"": ""0705fd20-f940-45d0-9c4a-2e720d5cb8d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumables2"",
                    ""type"": ""Button"",
                    ""id"": ""aee8ce69-982e-42ad-b2ed-cc200aa55ff9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumables1"",
                    ""type"": ""Button"",
                    ""id"": ""2a54e73d-e7dc-414d-a023-9db42ec0524a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ff0b8a19-2821-4fcd-a6bd-0b8a31578ddc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""319d1e79-29df-456b-92e1-bbee3c490617"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""40675cbe-6f12-47d4-b037-bfce017bfb73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jerk"",
                    ""type"": ""Button"",
                    ""id"": ""bceb2ea3-c01b-42bf-b944-0a6ea44d9977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d215030a-388e-4cc0-8884-7cda0295b650"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""011df503-4959-4631-ae73-fb0f2a9cc2e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""68ee0993-f916-4b00-9b34-44915757291b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84a3696a-9c70-4429-acbf-11193eaf7158"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""23f31aec-e628-46eb-a0ca-b63dd9ad2b6d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2ad2081d-7ece-48b0-b526-bb7245b8a93f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb30b44c-661c-4707-95c2-c0c4ef38f67e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumables2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e89bf88-97a9-4518-9186-a5f23031ad43"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d72c1f6-e48e-4e0c-8a7e-b931c210bca8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aea4d9c8-1d4d-40d3-9e79-fdf2c04dec8f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09065244-54d4-4a19-9ffd-52502d448768"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jerk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dcf45b6-951a-4823-bee1-7e4dc9a7fd02"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c747c78a-2b07-4717-8814-690e135091a0"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85ff524c-5a8a-417f-aa1e-bf1aae117004"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2254f69-1436-4642-b7e9-b777f1bea8fd"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a04be2a1-97e5-4ced-be00-2e8c625f1d60"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumables1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIDefaultInput"",
            ""id"": ""f8ff985f-de49-491e-9e7d-1c05a5aa2e0e"",
            ""actions"": [
                {
                    ""name"": ""Invent"",
                    ""type"": ""Button"",
                    ""id"": ""c7f0dbcc-c83c-43fd-82b4-9d4eb8f92c9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""5965bf2b-e385-42cf-98f4-c71f41301f5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityMenu"",
                    ""type"": ""Button"",
                    ""id"": ""f56de30d-a8b9-4564-b46d-e5d21aa21168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9270a81-d614-453b-af66-652e399df8e6"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1506304-a2a1-41e1-8c76-ba651b4a9b8a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbd03b3a-2cb0-4038-a3ec-7489813461ac"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InBlock"",
            ""id"": ""bf17ae40-ab3c-4280-b4e8-861db9118ccf"",
            ""actions"": [
                {
                    ""name"": ""ExitBlock"",
                    ""type"": ""Button"",
                    ""id"": ""65f1706a-c610-4e28-ab35-2c4844f72d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b18d7f7b-d9f2-4532-af2c-9969537d3190"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""8dd91e5d-d01b-413f-af67-52288a103fc5"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d5248673-363f-4d0d-9e38-eb515ed3c517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8eba8f87-5a98-4df0-9475-a35f0e0a35f8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIInGameMenuInput"",
            ""id"": ""9288bfaf-1082-4ffe-99fe-0cb7433a757e"",
            ""actions"": [
                {
                    ""name"": ""ExitMenu"",
                    ""type"": ""Button"",
                    ""id"": ""cd9325f3-07f2-435d-809a-bf99496632d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54c9fe5a-19b7-4cf3-a7fc-2c18bae1d3bb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CutSceneUI"",
            ""id"": ""27854951-470b-4aec-be6b-dd2a727acdba"",
            ""actions"": [
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c1c4f78a-d60b-4261-a6b2-13f788b1ea87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaf89d79-a37c-4c66-ab08-972a77a3b16a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Move = m_Default.FindAction("Move", throwIfNotFound: true);
        m_Default_Ability1 = m_Default.FindAction("Ability1", throwIfNotFound: true);
        m_Default_Ability2 = m_Default.FindAction("Ability2", throwIfNotFound: true);
        m_Default_Ability3 = m_Default.FindAction("Ability3", throwIfNotFound: true);
        m_Default_Ability4 = m_Default.FindAction("Ability4", throwIfNotFound: true);
        m_Default_Ability5 = m_Default.FindAction("Ability5", throwIfNotFound: true);
        m_Default_Consumables2 = m_Default.FindAction("Consumables2", throwIfNotFound: true);
        m_Default_Consumables1 = m_Default.FindAction("Consumables1", throwIfNotFound: true);
        m_Default_Jump = m_Default.FindAction("Jump", throwIfNotFound: true);
        m_Default_Attack = m_Default.FindAction("Attack", throwIfNotFound: true);
        m_Default_Block = m_Default.FindAction("Block", throwIfNotFound: true);
        m_Default_Jerk = m_Default.FindAction("Jerk", throwIfNotFound: true);
        // UIDefaultInput
        m_UIDefaultInput = asset.FindActionMap("UIDefaultInput", throwIfNotFound: true);
        m_UIDefaultInput_Invent = m_UIDefaultInput.FindAction("Invent", throwIfNotFound: true);
        m_UIDefaultInput_MainMenu = m_UIDefaultInput.FindAction("MainMenu", throwIfNotFound: true);
        m_UIDefaultInput_AbilityMenu = m_UIDefaultInput.FindAction("AbilityMenu", throwIfNotFound: true);
        // InBlock
        m_InBlock = asset.FindActionMap("InBlock", throwIfNotFound: true);
        m_InBlock_ExitBlock = m_InBlock.FindAction("ExitBlock", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Attack = m_Attack.FindAction("Attack", throwIfNotFound: true);
        // UIInGameMenuInput
        m_UIInGameMenuInput = asset.FindActionMap("UIInGameMenuInput", throwIfNotFound: true);
        m_UIInGameMenuInput_ExitMenu = m_UIInGameMenuInput.FindAction("ExitMenu", throwIfNotFound: true);
        // CutSceneUI
        m_CutSceneUI = asset.FindActionMap("CutSceneUI", throwIfNotFound: true);
        m_CutSceneUI_MainMenu = m_CutSceneUI.FindAction("MainMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Move;
    private readonly InputAction m_Default_Ability1;
    private readonly InputAction m_Default_Ability2;
    private readonly InputAction m_Default_Ability3;
    private readonly InputAction m_Default_Ability4;
    private readonly InputAction m_Default_Ability5;
    private readonly InputAction m_Default_Consumables2;
    private readonly InputAction m_Default_Consumables1;
    private readonly InputAction m_Default_Jump;
    private readonly InputAction m_Default_Attack;
    private readonly InputAction m_Default_Block;
    private readonly InputAction m_Default_Jerk;
    public struct DefaultActions
    {
        private @InputActions m_Wrapper;
        public DefaultActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Default_Move;
        public InputAction @Ability1 => m_Wrapper.m_Default_Ability1;
        public InputAction @Ability2 => m_Wrapper.m_Default_Ability2;
        public InputAction @Ability3 => m_Wrapper.m_Default_Ability3;
        public InputAction @Ability4 => m_Wrapper.m_Default_Ability4;
        public InputAction @Ability5 => m_Wrapper.m_Default_Ability5;
        public InputAction @Consumables2 => m_Wrapper.m_Default_Consumables2;
        public InputAction @Consumables1 => m_Wrapper.m_Default_Consumables1;
        public InputAction @Jump => m_Wrapper.m_Default_Jump;
        public InputAction @Attack => m_Wrapper.m_Default_Attack;
        public InputAction @Block => m_Wrapper.m_Default_Block;
        public InputAction @Jerk => m_Wrapper.m_Default_Jerk;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Ability1.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility1;
                @Ability1.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility1;
                @Ability1.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility1;
                @Ability2.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility2;
                @Ability2.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility2;
                @Ability2.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility2;
                @Ability3.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility3;
                @Ability3.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility3;
                @Ability3.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility3;
                @Ability4.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility4;
                @Ability4.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility4;
                @Ability4.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility4;
                @Ability5.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility5;
                @Ability5.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility5;
                @Ability5.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAbility5;
                @Consumables2.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables2;
                @Consumables2.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables2;
                @Consumables2.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables2;
                @Consumables1.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables1;
                @Consumables1.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables1;
                @Consumables1.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnConsumables1;
                @Jump.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBlock;
                @Jerk.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJerk;
                @Jerk.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJerk;
                @Jerk.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJerk;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Ability1.started += instance.OnAbility1;
                @Ability1.performed += instance.OnAbility1;
                @Ability1.canceled += instance.OnAbility1;
                @Ability2.started += instance.OnAbility2;
                @Ability2.performed += instance.OnAbility2;
                @Ability2.canceled += instance.OnAbility2;
                @Ability3.started += instance.OnAbility3;
                @Ability3.performed += instance.OnAbility3;
                @Ability3.canceled += instance.OnAbility3;
                @Ability4.started += instance.OnAbility4;
                @Ability4.performed += instance.OnAbility4;
                @Ability4.canceled += instance.OnAbility4;
                @Ability5.started += instance.OnAbility5;
                @Ability5.performed += instance.OnAbility5;
                @Ability5.canceled += instance.OnAbility5;
                @Consumables2.started += instance.OnConsumables2;
                @Consumables2.performed += instance.OnConsumables2;
                @Consumables2.canceled += instance.OnConsumables2;
                @Consumables1.started += instance.OnConsumables1;
                @Consumables1.performed += instance.OnConsumables1;
                @Consumables1.canceled += instance.OnConsumables1;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @Jerk.started += instance.OnJerk;
                @Jerk.performed += instance.OnJerk;
                @Jerk.canceled += instance.OnJerk;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // UIDefaultInput
    private readonly InputActionMap m_UIDefaultInput;
    private IUIDefaultInputActions m_UIDefaultInputActionsCallbackInterface;
    private readonly InputAction m_UIDefaultInput_Invent;
    private readonly InputAction m_UIDefaultInput_MainMenu;
    private readonly InputAction m_UIDefaultInput_AbilityMenu;
    public struct UIDefaultInputActions
    {
        private @InputActions m_Wrapper;
        public UIDefaultInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Invent => m_Wrapper.m_UIDefaultInput_Invent;
        public InputAction @MainMenu => m_Wrapper.m_UIDefaultInput_MainMenu;
        public InputAction @AbilityMenu => m_Wrapper.m_UIDefaultInput_AbilityMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIDefaultInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIDefaultInputActions set) { return set.Get(); }
        public void SetCallbacks(IUIDefaultInputActions instance)
        {
            if (m_Wrapper.m_UIDefaultInputActionsCallbackInterface != null)
            {
                @Invent.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @Invent.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @Invent.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @MainMenu.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @MainMenu.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @MainMenu.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @AbilityMenu.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
                @AbilityMenu.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
                @AbilityMenu.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
            }
            m_Wrapper.m_UIDefaultInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Invent.started += instance.OnInvent;
                @Invent.performed += instance.OnInvent;
                @Invent.canceled += instance.OnInvent;
                @MainMenu.started += instance.OnMainMenu;
                @MainMenu.performed += instance.OnMainMenu;
                @MainMenu.canceled += instance.OnMainMenu;
                @AbilityMenu.started += instance.OnAbilityMenu;
                @AbilityMenu.performed += instance.OnAbilityMenu;
                @AbilityMenu.canceled += instance.OnAbilityMenu;
            }
        }
    }
    public UIDefaultInputActions @UIDefaultInput => new UIDefaultInputActions(this);

    // InBlock
    private readonly InputActionMap m_InBlock;
    private IInBlockActions m_InBlockActionsCallbackInterface;
    private readonly InputAction m_InBlock_ExitBlock;
    public struct InBlockActions
    {
        private @InputActions m_Wrapper;
        public InBlockActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitBlock => m_Wrapper.m_InBlock_ExitBlock;
        public InputActionMap Get() { return m_Wrapper.m_InBlock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InBlockActions set) { return set.Get(); }
        public void SetCallbacks(IInBlockActions instance)
        {
            if (m_Wrapper.m_InBlockActionsCallbackInterface != null)
            {
                @ExitBlock.started -= m_Wrapper.m_InBlockActionsCallbackInterface.OnExitBlock;
                @ExitBlock.performed -= m_Wrapper.m_InBlockActionsCallbackInterface.OnExitBlock;
                @ExitBlock.canceled -= m_Wrapper.m_InBlockActionsCallbackInterface.OnExitBlock;
            }
            m_Wrapper.m_InBlockActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ExitBlock.started += instance.OnExitBlock;
                @ExitBlock.performed += instance.OnExitBlock;
                @ExitBlock.canceled += instance.OnExitBlock;
            }
        }
    }
    public InBlockActions @InBlock => new InBlockActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private IAttackActions m_AttackActionsCallbackInterface;
    private readonly InputAction m_Attack_Attack;
    public struct AttackActions
    {
        private @InputActions m_Wrapper;
        public AttackActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Attack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void SetCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_AttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // UIInGameMenuInput
    private readonly InputActionMap m_UIInGameMenuInput;
    private IUIInGameMenuInputActions m_UIInGameMenuInputActionsCallbackInterface;
    private readonly InputAction m_UIInGameMenuInput_ExitMenu;
    public struct UIInGameMenuInputActions
    {
        private @InputActions m_Wrapper;
        public UIInGameMenuInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitMenu => m_Wrapper.m_UIInGameMenuInput_ExitMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIInGameMenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInGameMenuInputActions set) { return set.Get(); }
        public void SetCallbacks(IUIInGameMenuInputActions instance)
        {
            if (m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface != null)
            {
                @ExitMenu.started -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
                @ExitMenu.performed -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
                @ExitMenu.canceled -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
            }
            m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ExitMenu.started += instance.OnExitMenu;
                @ExitMenu.performed += instance.OnExitMenu;
                @ExitMenu.canceled += instance.OnExitMenu;
            }
        }
    }
    public UIInGameMenuInputActions @UIInGameMenuInput => new UIInGameMenuInputActions(this);

    // CutSceneUI
    private readonly InputActionMap m_CutSceneUI;
    private ICutSceneUIActions m_CutSceneUIActionsCallbackInterface;
    private readonly InputAction m_CutSceneUI_MainMenu;
    public struct CutSceneUIActions
    {
        private @InputActions m_Wrapper;
        public CutSceneUIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainMenu => m_Wrapper.m_CutSceneUI_MainMenu;
        public InputActionMap Get() { return m_Wrapper.m_CutSceneUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutSceneUIActions set) { return set.Get(); }
        public void SetCallbacks(ICutSceneUIActions instance)
        {
            if (m_Wrapper.m_CutSceneUIActionsCallbackInterface != null)
            {
                @MainMenu.started -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
                @MainMenu.performed -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
                @MainMenu.canceled -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
            }
            m_Wrapper.m_CutSceneUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainMenu.started += instance.OnMainMenu;
                @MainMenu.performed += instance.OnMainMenu;
                @MainMenu.canceled += instance.OnMainMenu;
            }
        }
    }
    public CutSceneUIActions @CutSceneUI => new CutSceneUIActions(this);
    public interface IDefaultActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnAbility3(InputAction.CallbackContext context);
        void OnAbility4(InputAction.CallbackContext context);
        void OnAbility5(InputAction.CallbackContext context);
        void OnConsumables2(InputAction.CallbackContext context);
        void OnConsumables1(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnJerk(InputAction.CallbackContext context);
    }
    public interface IUIDefaultInputActions
    {
        void OnInvent(InputAction.CallbackContext context);
        void OnMainMenu(InputAction.CallbackContext context);
        void OnAbilityMenu(InputAction.CallbackContext context);
    }
    public interface IInBlockActions
    {
        void OnExitBlock(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IUIInGameMenuInputActions
    {
        void OnExitMenu(InputAction.CallbackContext context);
    }
    public interface ICutSceneUIActions
    {
        void OnMainMenu(InputAction.CallbackContext context);
    }
}
