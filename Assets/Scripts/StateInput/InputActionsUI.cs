//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/StateInput/InputActionsUI.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsUI : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsUI()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsUI"",
    ""maps"": [
        {
            ""name"": ""UIInGameMenuInput"",
            ""id"": ""c32ce7f9-dbab-4270-8556-291247938ac6"",
            ""actions"": [
                {
                    ""name"": ""ExitMenu"",
                    ""type"": ""Button"",
                    ""id"": ""bd06d3c4-7daf-46f5-b001-b5658e91c59c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a66b0a58-b73d-4b92-9204-05111a596075"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIDefaultInput"",
            ""id"": ""c4cd3ca8-d69f-49e2-8ce1-4c0507e98b10"",
            ""actions"": [
                {
                    ""name"": ""Invent"",
                    ""type"": ""Button"",
                    ""id"": ""494a0451-7f59-4a81-ad50-dde188d583de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""bc53a820-96d7-4da9-b2f0-acb86eccac90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityMenu"",
                    ""type"": ""Button"",
                    ""id"": ""8fa0af88-f7d9-417e-af6b-419aa57dd850"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f962e062-967f-4a70-bdbe-570ff131b4db"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af84a049-021b-40d7-a4fd-688f0f212a03"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dc2b00d-cbdb-4e93-b018-8936c69cfb6d"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CutSceneUI"",
            ""id"": ""cbf6f97e-7e96-4be3-a0fd-0af72bbc223e"",
            ""actions"": [
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""312bb24d-7184-4188-8b27-6712d0339d84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c614300-6ff7-43e4-98d2-be9f02a12831"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UIInGameMenuInput
        m_UIInGameMenuInput = asset.FindActionMap("UIInGameMenuInput", throwIfNotFound: true);
        m_UIInGameMenuInput_ExitMenu = m_UIInGameMenuInput.FindAction("ExitMenu", throwIfNotFound: true);
        // UIDefaultInput
        m_UIDefaultInput = asset.FindActionMap("UIDefaultInput", throwIfNotFound: true);
        m_UIDefaultInput_Invent = m_UIDefaultInput.FindAction("Invent", throwIfNotFound: true);
        m_UIDefaultInput_MainMenu = m_UIDefaultInput.FindAction("MainMenu", throwIfNotFound: true);
        m_UIDefaultInput_AbilityMenu = m_UIDefaultInput.FindAction("AbilityMenu", throwIfNotFound: true);
        // CutSceneUI
        m_CutSceneUI = asset.FindActionMap("CutSceneUI", throwIfNotFound: true);
        m_CutSceneUI_MainMenu = m_CutSceneUI.FindAction("MainMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIInGameMenuInput
    private readonly InputActionMap m_UIInGameMenuInput;
    private IUIInGameMenuInputActions m_UIInGameMenuInputActionsCallbackInterface;
    private readonly InputAction m_UIInGameMenuInput_ExitMenu;
    public struct UIInGameMenuInputActions
    {
        private @InputActionsUI m_Wrapper;
        public UIInGameMenuInputActions(@InputActionsUI wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitMenu => m_Wrapper.m_UIInGameMenuInput_ExitMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIInGameMenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInGameMenuInputActions set) { return set.Get(); }
        public void SetCallbacks(IUIInGameMenuInputActions instance)
        {
            if (m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface != null)
            {
                @ExitMenu.started -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
                @ExitMenu.performed -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
                @ExitMenu.canceled -= m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface.OnExitMenu;
            }
            m_Wrapper.m_UIInGameMenuInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ExitMenu.started += instance.OnExitMenu;
                @ExitMenu.performed += instance.OnExitMenu;
                @ExitMenu.canceled += instance.OnExitMenu;
            }
        }
    }
    public UIInGameMenuInputActions @UIInGameMenuInput => new UIInGameMenuInputActions(this);

    // UIDefaultInput
    private readonly InputActionMap m_UIDefaultInput;
    private IUIDefaultInputActions m_UIDefaultInputActionsCallbackInterface;
    private readonly InputAction m_UIDefaultInput_Invent;
    private readonly InputAction m_UIDefaultInput_MainMenu;
    private readonly InputAction m_UIDefaultInput_AbilityMenu;
    public struct UIDefaultInputActions
    {
        private @InputActionsUI m_Wrapper;
        public UIDefaultInputActions(@InputActionsUI wrapper) { m_Wrapper = wrapper; }
        public InputAction @Invent => m_Wrapper.m_UIDefaultInput_Invent;
        public InputAction @MainMenu => m_Wrapper.m_UIDefaultInput_MainMenu;
        public InputAction @AbilityMenu => m_Wrapper.m_UIDefaultInput_AbilityMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIDefaultInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIDefaultInputActions set) { return set.Get(); }
        public void SetCallbacks(IUIDefaultInputActions instance)
        {
            if (m_Wrapper.m_UIDefaultInputActionsCallbackInterface != null)
            {
                @Invent.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @Invent.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @Invent.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnInvent;
                @MainMenu.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @MainMenu.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @MainMenu.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnMainMenu;
                @AbilityMenu.started -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
                @AbilityMenu.performed -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
                @AbilityMenu.canceled -= m_Wrapper.m_UIDefaultInputActionsCallbackInterface.OnAbilityMenu;
            }
            m_Wrapper.m_UIDefaultInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Invent.started += instance.OnInvent;
                @Invent.performed += instance.OnInvent;
                @Invent.canceled += instance.OnInvent;
                @MainMenu.started += instance.OnMainMenu;
                @MainMenu.performed += instance.OnMainMenu;
                @MainMenu.canceled += instance.OnMainMenu;
                @AbilityMenu.started += instance.OnAbilityMenu;
                @AbilityMenu.performed += instance.OnAbilityMenu;
                @AbilityMenu.canceled += instance.OnAbilityMenu;
            }
        }
    }
    public UIDefaultInputActions @UIDefaultInput => new UIDefaultInputActions(this);

    // CutSceneUI
    private readonly InputActionMap m_CutSceneUI;
    private ICutSceneUIActions m_CutSceneUIActionsCallbackInterface;
    private readonly InputAction m_CutSceneUI_MainMenu;
    public struct CutSceneUIActions
    {
        private @InputActionsUI m_Wrapper;
        public CutSceneUIActions(@InputActionsUI wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainMenu => m_Wrapper.m_CutSceneUI_MainMenu;
        public InputActionMap Get() { return m_Wrapper.m_CutSceneUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutSceneUIActions set) { return set.Get(); }
        public void SetCallbacks(ICutSceneUIActions instance)
        {
            if (m_Wrapper.m_CutSceneUIActionsCallbackInterface != null)
            {
                @MainMenu.started -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
                @MainMenu.performed -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
                @MainMenu.canceled -= m_Wrapper.m_CutSceneUIActionsCallbackInterface.OnMainMenu;
            }
            m_Wrapper.m_CutSceneUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainMenu.started += instance.OnMainMenu;
                @MainMenu.performed += instance.OnMainMenu;
                @MainMenu.canceled += instance.OnMainMenu;
            }
        }
    }
    public CutSceneUIActions @CutSceneUI => new CutSceneUIActions(this);
    public interface IUIInGameMenuInputActions
    {
        void OnExitMenu(InputAction.CallbackContext context);
    }
    public interface IUIDefaultInputActions
    {
        void OnInvent(InputAction.CallbackContext context);
        void OnMainMenu(InputAction.CallbackContext context);
        void OnAbilityMenu(InputAction.CallbackContext context);
    }
    public interface ICutSceneUIActions
    {
        void OnMainMenu(InputAction.CallbackContext context);
    }
}
